const e='# Popover Private\n\n## Installation\n`npm i @snack-uikit/popover-private`\n\n[Changelog](./CHANGELOG.md)\n\n## Example\n\n```typescript jsx\nimport { useRef } from "react";\nimport { PopoverPrivate } from "@snack-uikit/popover-private";\n\nfunction App() {\n  return (\n    <PopoverPrivate\n        placement=\'top\'\n        popoverContent=\'Не нажимать, опасно!\'\n        trigger=\'click\'\n      >\n        <button>Button with popover</button>\n    </PopoverPrivate>\n  );\n}\n\n// Без оборачивания таргета\nfunction App() {\n  const triggerRef = useRef(null)\n\n  return (\n    <>\n      <PopoverPrivate\n        placement=\'top\'\n        popoverContent=\'Не нажимать, опасно!\'\n        trigger=\'click\'\n        triggerRef={triggerRef}\n      />\n      <button ref={triggerRef}>Button with popover</button>\n    </>\n  );\n}\n```\n\n[//]: DOCUMENTATION_SECTION_START\n[//]: THIS_SECTION_IS_AUTOGENERATED_PLEASE_DONT_EDIT_IT\n## PopoverPrivate\n### Props\n| name | type | default value | description |\n|------|------|---------------|-------------|\n| trigger* | enum Trigger: `"click"`, `"hover"`, `"focusVisible"`, `"focus"`, `"hoverAndFocusVisible"`, `"hoverAndFocus"`, `"clickAndFocusVisible"` | - | Условие отображения поповера: <br> - `click` - открывать по клику <br> - `hover` - открывать по ховеру <br> - `focusVisible` - открывать по focus-visible <br> - `focus` - открывать по фокусу <br> - `hoverAndFocusVisible` - открывать по ховеру и focus-visible <br> - `hoverAndFocus` - открывать по ховеру и фокусу <br> - `clickAndFocusVisible` - открывать по клику и focus-visible |\n| popoverContent* | `ReactNode \\| ReactNode[]` | - | Контент поповера |\n| placement* | enum Placement: `"left"`, `"left-start"`, `"left-end"`, `"right"`, `"right-start"`, `"right-end"`, `"top"`, `"top-start"`, `"top-end"`, `"bottom"`, `"bottom-start"`, `"bottom-end"` | top | Положение поповера относительно своего триггера (children). |\n| open | `boolean` | - | Управляет состоянием показан/не показан. |\n| onOpenChange | `(isOpen: boolean) => void` | - | Колбек отображения компонента. Срабатывает при изменении состояния open. |\n| outsideClick | `boolean \\| OutsideClickHandler` | - | Закрывать ли при клике вне поповера |\n| className | `string` | - | CSS-класс |\n| triggerClassName | `string` | - | CSS-класс триггера |\n| hasArrow | `boolean` | - | Параметр наличия стрелки у поповера. В размеры стрелки встроен отступ. Дополнительный отступ может быть задан параметром `offset`. У элемента стрелки нет цвета, необходимо задавать его через параметр `arrowClassName`. |\n| arrowContainerClassName | `string` | - | CSS-класс контейнера стрелки поповера |\n| arrowElementClassName | `string` | - | CSS-класс стрелки поповера |\n| offset | `number` | 0 | Отступ поповера от его триггер-элемента (в пикселях). |\n| hoverDelayOpen | `number` | - | Задержка открытия по ховеру |\n| hoverDelayClose | `number` | - | Задержка закрытия по ховеру |\n| widthStrategy | enum PopoverWidthStrategy: `"auto"`, `"gte"`, `"eq"` | auto | Стратегия управления шириной контейнера поповера <br> - `auto` - соответствует ширине контента, <br> - `gte` - Great Than or Equal, равен ширине таргета или больше ее, если контент в поповере шире, <br> - `eq` - Equal, строго равен ширине таргета. |\n| heightStrategy | enum PopoverHeightStrategy: `"auto"`, `"eq"`, `"lte"` | auto | Стратегия управления высотой контейнера поповера <br> - `auto` - соответствует высоте контента, <br> - `lte` - Less Than or Equal, равен высоте таргета или меньше ее, если контент в поповере меньше, <br> - `eq` - Equal, строго равен высоте таргета. |\n| closeOnEscapeKey | `boolean` | true | Закрывать ли по нажатию на кнопку `Esc` |\n| triggerClickByKeys | `boolean` | true | Вызывается ли попоповер по нажатию клавиш Enter/Space (при trigger = `click`) |\n| fallbackPlacements | `Placement[]` | - | Цепочка расположений которая будет применяться к поповеру от первого к последнему если при текущем он не влезает. |\n| disableSpanWrapper | `boolean` | - | Отключает для `isValidElement` внешнюю обертку триггера <br> Пригодится для элементов с `position: absolute` |\n| closeOnPopstate | `boolean` | - | Закрывать ли поповер при пекреходе по истории браузера |\n| triggerRef | `ForwardedRef<ReferenceType \\| HTMLElement>` | - | Ref ссылка на триггер |\n| children | `ReactNode \\| ChildrenFunction` | - | Триггер поповера (подробнее читайте ниже) |\n\n\n[//]: DOCUMENTATION_SECTION_END\n\n\n#### **`children: ReactNode | ChildrenFunction`**\n  Референс, относительно которого рисуется поповер. Возможно несколько вариантов:\n - в **`children`** передан компонент, который принимает в себя `ref`. В таком случае пропсы этого компонента будут дополнены необходимыми для работы триггеров отображения: `useHoverTrigger`, `useClickTrigger`, `useFocusTrigger`. \n    \n    > Осторожно, `ref` будет перезаписан. Если вы хотите получить ref на children поповера, можете передать ref в параметр triggerRef. Тогда поповер установит туда значение:\n    ```typescript jsx\n      <PopoverPrivate\n        popoverContent={<div className={style.content}>some tip here</div>}\n        useHoverTrigger\n        triggerRef={(button) => { /* button HTMLElement из children */ }}\n      >\n        <button>some button</button>\n      </PopoverPrivate>\n    ```\n\n  - в **`children`** передан компонент, который **НЕ** принимает в себя `ref`. В таком случае компонент будет обернут в `span`, который и послужит рефом для поповера.\n\n  - в **`children`** передана функция. Эта функция будет вызвана на каждый рендер, она должна возвращать `ReactNode`. В параметры принимает ref, который нужно установить в целевой компонент и функцию `getReferenceProps`, возвращающую необходимые для ref параметры.\n  Пример:\n    ```typescript jsx\n      <PopoverPrivate\n        popoverContent={<div className={style.content}>some tip here</div>}\n        useHoverTrigger\n      >\n        {({ getReferenceProps, ref }) => (\n          <label>\n            Set the value\n            <input ref={ref} {...getReferenceProps({ onClick: onClickInputHandler })} />\n          </label>\n        )}\n      </PopoverPrivate>\n    ```\n\n  - в **`children`** передан примитив string, number или React.Fragment. Children будет обернут в `span`.\n\n  - **`children`**  не передан в компонент, в таком случае необходимо передать `ref` элемента в `triggerRef`, который будет служить триггером для поповера.\n  Пример:\n  ```typescript jsx\n  const triggerRef = useRef(null)\n\n  return (\n    <>\n      <PopoverPrivate \n        popoverContent={<div className={style.content}>some tip here</div>}\n        useHoverTrigger\n        triggerRef={triggerRef}\n      />\n      <button ref={triggerRef}>Click me</button>\n    </>\n  )\n  ```';export{e as p};
